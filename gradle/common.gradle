java {
    sourceCompatibility(JavaVersion.VERSION_1_8)
    targetCompatibility(JavaVersion.VERSION_1_8)
}

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    // For development so you can publish binaries locally and have them grabbed from there
    mavenLocal()

    // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
    mavenCentral()

    // Used for gestalt 7 - Android annotations
    google()

    // Terasology Artifactory instance for libs not readily available elsewhere plus our own libs
    maven {
        def repoViaEnv = System.getenv()["RESOLUTION_REPO"]
        if (rootProject.hasProperty("alternativeResolutionRepo")) {
            // If the user supplies an alternative repo via gradle.properties then use that
            name "from alternativeResolutionRepo property"
            url alternativeResolutionRepo
        } else if (repoViaEnv != null && repoViaEnv != "") {
            name "from \$RESOLUTION_REPO"
            url = repoViaEnv
        } else {
            // Our default is the main virtual repo containing everything except repos for testing Artifactory itself
            name "Terasology Artifactory"
            url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
            allowInsecureProtocol true  // ðŸ˜±
        }
    }

    maven {
        name "snowplow (pre-0.9)"
        url "http://maven.snplow.com/releases"
        allowInsecureProtocol true  // ðŸ˜±
    }
}

// Extra details provided for unit tests
test {
    useJUnitPlatform()

    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true
    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true
    reports {
        junitXml.enabled = true
    }
    // Arguments to include while running tests
    jvmArgs '-Xms512m', '-Xmx1024m'
}

// In theory all Javadoc should be good and fixed, but it might be a bit much to entirely fail a build over. For now at least ...
// Note: In IntelliJ 2020.1+ running a javadoc Gradle task may still *look* alarming in the UI, but errors should be ignored
javadoc {
    failOnError = false
}

group = 'org.terasology.nui'
version = JNLuaVersion

publishing {
    publications {
        "$project.name"(MavenPublication) {
            // Without this we get a .pom with no dependencies
            from components.java

            repositories {
                maven {
                    name = 'TerasologyOrg'
                    allowInsecureProtocol true // ðŸ˜± - no https on our Artifactory yet

                    if (rootProject.hasProperty("publishRepo")) {
                        // This first option is good for local testing, you can set a full explicit target repo in gradle.properties
                        url = "http://artifactory.terasology.org/artifactory/$publishRepo"

                        logger.info("Changing PUBLISH repoKey set via Gradle property to {}", publishRepo)
                    } else {
                        // Support override from the environment to use a different target publish org
                        String deducedPublishRepo = System.getenv()["PUBLISH_ORG"]
                        if (deducedPublishRepo == null || deducedPublishRepo == "") {
                            // If not then default
                            deducedPublishRepo = "libs"
                        }

                        // Base final publish repo on whether we're building a snapshot or a release
                        if (project.version.endsWith('SNAPSHOT')) {
                            deducedPublishRepo += "-snapshot-local"
                        } else {
                            deducedPublishRepo += "-release-local"
                        }

                        logger.info("The final deduced publish repo is {}", deducedPublishRepo)
                        url = "http://artifactory.terasology.org/artifactory/$deducedPublishRepo"
                    }

                    if (rootProject.hasProperty("mavenUser") && rootProject.hasProperty("mavenPass")) {
                        credentials {
                            username = "$mavenUser"
                            password = "$mavenPass"
                        }
                        authentication {
                            basic(BasicAuthentication)
                        }
                    }
                }
            }
        }
    }
}
